"""
Generated by qenerate plugin=pydantic_v1. DO NOT MODIFY MANUALLY!
"""
from collections.abc import Callable  # noqa: F401 # pylint: disable=W0611
from datetime import datetime  # noqa: F401 # pylint: disable=W0611
from enum import Enum  # noqa: F401 # pylint: disable=W0611
from typing import (  # noqa: F401 # pylint: disable=W0611
    Any,
    Optional,
    Union,
)

from pydantic import (  # noqa: F401 # pylint: disable=W0611
    BaseModel,
    Extra,
    Field,
    Json,
)

from reconcile.gql_definitions.fragments.jumphost_common_fields import (
    CommonJumphostFields,
)
from reconcile.gql_definitions.fragments.vault_secret import VaultSecret


DEFINITION = """
fragment CommonJumphostFields on ClusterJumpHost_v1 {
  hostname
  knownHosts
  user
  port
  remotePort
  identity {
    ... VaultSecret
  }
}

fragment VaultSecret on VaultSecret_v1 {
    path
    field
    version
    format
}

query AWSResourcesNamespaces {
  namespaces: namespaces_v1 {
    name
    delete
    clusterAdmin
    managedExternalResources
    externalResources {
      provider
      provisioner {
        name
      }
      ... on  NamespaceAWSResourceProvider_v1{
        resources {
            output_format {
            provider
            ... on NamespaceAWSResourceGenericSecretOutputFormat_v1 {
                data
            }
            }
            provider

            ... on NamespaceAWSResourceSQS_v1 {
                region
                identifier
                output_resource_name
                annotations
                specs {
                    defaults
                    queues {
                        key
                        value
                    }
                }
            }
        }
      }
    }
    environment {
      name
    }
    app {
      name
    }
    cluster {
      name
      serverUrl
      insecureSkipTLSVerify
      jumpHost {
        ... CommonJumphostFields
      }
      automationToken {
        ... VaultSecret
      }
      clusterAdminAutomationToken {
        ... VaultSecret
      }
      spec {
        region
      }
      internal
      disable {
        integrations
      }
    }
  }
}
"""


class ConfiguredBaseModel(BaseModel):
    class Config:
        smart_union = True
        extra = Extra.forbid


class ExternalResourcesProvisionerV1(ConfiguredBaseModel):
    name: str = Field(..., alias="name")


class NamespaceExternalResourceV1(ConfiguredBaseModel):
    provider: str = Field(..., alias="provider")
    provisioner: ExternalResourcesProvisionerV1 = Field(..., alias="provisioner")


class NamespaceAWSResourceOutputFormatV1(ConfiguredBaseModel):
    provider: str = Field(..., alias="provider")


class NamespaceAWSResourceGenericSecretOutputFormatV1(
    NamespaceAWSResourceOutputFormatV1
):
    data: Optional[str] = Field(..., alias="data")


class NamespaceAWSResourceV1(ConfiguredBaseModel):
    output_format: Optional[
        Union[
            NamespaceAWSResourceGenericSecretOutputFormatV1,
            NamespaceAWSResourceOutputFormatV1,
        ]
    ] = Field(..., alias="output_format")
    provider: str = Field(..., alias="provider")


class KeyValueV1(ConfiguredBaseModel):
    key: str = Field(..., alias="key")
    value: str = Field(..., alias="value")


class SQSQueuesSpecsV1(ConfiguredBaseModel):
    defaults: str = Field(..., alias="defaults")
    queues: list[KeyValueV1] = Field(..., alias="queues")


class NamespaceAWSResourceSQSV1(NamespaceAWSResourceV1):
    region: Optional[str] = Field(..., alias="region")
    identifier: str = Field(..., alias="identifier")
    output_resource_name: Optional[str] = Field(..., alias="output_resource_name")
    annotations: Optional[str] = Field(..., alias="annotations")
    specs: list[SQSQueuesSpecsV1] = Field(..., alias="specs")


class NamespaceAWSResourceProviderV1(NamespaceExternalResourceV1):
    resources: list[Union[NamespaceAWSResourceSQSV1, NamespaceAWSResourceV1]] = Field(
        ..., alias="resources"
    )


class EnvironmentV1(ConfiguredBaseModel):
    name: str = Field(..., alias="name")


class AppV1(ConfiguredBaseModel):
    name: str = Field(..., alias="name")


class ClusterSpecV1(ConfiguredBaseModel):
    region: str = Field(..., alias="region")


class DisableClusterAutomationsV1(ConfiguredBaseModel):
    integrations: Optional[list[str]] = Field(..., alias="integrations")


class ClusterV1(ConfiguredBaseModel):
    name: str = Field(..., alias="name")
    server_url: str = Field(..., alias="serverUrl")
    insecure_skip_tls_verify: Optional[bool] = Field(..., alias="insecureSkipTLSVerify")
    jump_host: Optional[CommonJumphostFields] = Field(..., alias="jumpHost")
    automation_token: Optional[VaultSecret] = Field(..., alias="automationToken")
    cluster_admin_automation_token: Optional[VaultSecret] = Field(
        ..., alias="clusterAdminAutomationToken"
    )
    spec: Optional[ClusterSpecV1] = Field(..., alias="spec")
    internal: Optional[bool] = Field(..., alias="internal")
    disable: Optional[DisableClusterAutomationsV1] = Field(..., alias="disable")


class NamespaceV1(ConfiguredBaseModel):
    name: str = Field(..., alias="name")
    delete: Optional[bool] = Field(..., alias="delete")
    cluster_admin: Optional[bool] = Field(..., alias="clusterAdmin")
    managed_external_resources: Optional[bool] = Field(
        ..., alias="managedExternalResources"
    )
    external_resources: Optional[
        list[Union[NamespaceAWSResourceProviderV1, NamespaceExternalResourceV1]]
    ] = Field(..., alias="externalResources")
    environment: EnvironmentV1 = Field(..., alias="environment")
    app: AppV1 = Field(..., alias="app")
    cluster: ClusterV1 = Field(..., alias="cluster")


class AWSResourcesNamespacesQueryData(ConfiguredBaseModel):
    namespaces: Optional[list[NamespaceV1]] = Field(..., alias="namespaces")


def query(query_func: Callable, **kwargs: Any) -> AWSResourcesNamespacesQueryData:
    """
    This is a convenience function which queries and parses the data into
    concrete types. It should be compatible with most GQL clients.
    You do not have to use it to consume the generated data classes.
    Alternatively, you can also mime and alternate the behavior
    of this function in the caller.

    Parameters:
        query_func (Callable): Function which queries your GQL Server
        kwargs: optional arguments that will be passed to the query function

    Returns:
        AWSResourcesNamespacesQueryData: queried data parsed into generated classes
    """
    raw_data: dict[Any, Any] = query_func(DEFINITION, **kwargs)
    return AWSResourcesNamespacesQueryData(**raw_data)
